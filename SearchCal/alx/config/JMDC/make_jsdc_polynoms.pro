PRO MAKE_JSDC_POLYNOMS,RESIDU,E_RESIDU
;
@ jsdc_define_common.pro
;
  X=FINDGEN(17)*(!PI*2./16.) & USERSYM, 0.75*COS(X), 0.75*SIN(X), /FILL
;
; LBO 2023: 
; 1=reject outliers 1 by 1 to retain the maximum number of samples (slower convergence) (2023)
; 0=brute-force (excludes more samples) (2017)
USE_NEW_CONVERGENCE=0
PRINT,"USE_NEW_CONVERGENCE = ", USE_NEW_CONVERGENCE

NLAST=0
;NLAST=3 ; 2024.1 (faster)
PRINT,"NLAST = ", NLAST


SHOW_DIFF=1
PRINT,"SHOW_DIFF = ", SHOW_DIFF


; Initialize parameters & arrays
  RESIDU=DBLARR(NSTAR_B,NCOLORS)-100
  E_RESIDU=RESIDU
  LN_10=ALOG(10.0D)
;
; Select "good" database stars
;
  IF (MODE EQ 'FIX') THEN GOOD_B=GOOD_FIX ELSE BEGIN
    Q=TOTAL(MAG_B[*,USEDBANDS],2) & P=TOTAL(EMAG_B[*,USEDBANDS],2) & W=WHERE(FINITE(Q) AND FINITE(P)) ; w: magnitude definies

    PRINT,"MAKE_JSDC_POLYNOMS: Initial stars: ",N_ELEMENTS(W)

    IF (LUM_CLASSES EQ 0) THEN GOOD_B=WHERE(SPTYPE_B[W] NE -1 AND DIAM_I[W] NE -1 AND EDIAM_I[W] NE -1 AND FINITE(DIAM_I[W]) AND SNR_DIAM_I[W] GT SNR AND DSPTYPE_B[W] GE 0 AND DSPTYPE_B[W] LE DSPTYPE_MAX)
    IF (LUM_CLASSES EQ 124) THEN GOOD_B=WHERE(LUMCLASS_B[W] NE 5 AND LUMCLASS_B[W] NE 3 AND SPTYPE_B[W] NE -1 AND DIAM_I[W] NE -1 AND EDIAM_I[W] NE -1 AND FINITE(DIAM_I[W]) AND SNR_DIAM_I[W] GT SNR AND DSPTYPE_B[W] GE 0 AND DSPTYPE_B[W] LE DSPTYPE_MAX)
    IF (LUM_CLASSES EQ 5) THEN GOOD_B=WHERE(LUMCLASS_B[W] EQ 5 AND DLUMCLASS_B[W] EQ 0 AND SPTYPE_B[W] NE -1 AND DIAM_I[W] NE -1 AND EDIAM_I[W] NE -1 AND FINITE(DIAM_I[W]) AND SNR_DIAM_I[W] GT SNR AND DSPTYPE_B[W] GE 0 AND DSPTYPE_B[W] LE DSPTYPE_MAX)
    IF (LUM_CLASSES EQ 3) THEN GOOD_B=WHERE(LUMCLASS_B[W] EQ 3 AND DLUMCLASS_B[W] EQ 0 AND SPTYPE_B[W] NE -1 AND DIAM_I[W] NE -1 AND EDIAM_I[W] NE -1 AND FINITE(DIAM_I[W]) AND SNR_DIAM_I[W] GT SNR AND DSPTYPE_B[W] GE 0 AND DSPTYPE_B[W] LE DSPTYPE_MAX)
    IF (LUM_CLASSES EQ 45) THEN GOOD_B=WHERE((LUMCLASS_B[W] EQ 4 OR LUMCLASS_B[W] EQ 5) AND DLUMCLASS_B[W] EQ 0 AND SPTYPE_B[W] NE -1 AND DIAM_I[W] NE -1 AND EDIAM_I[W] NE -1 AND FINITE(DIAM_I[W]) AND SNR_DIAM_I[W] GT SNR AND DSPTYPE_B[W] GE 0 AND DSPTYPE_B[W] LE DSPTYPE_MAX)
    IF (LUM_CLASSES EQ 35) THEN GOOD_B=WHERE((LUMCLASS_B[W] EQ 3 OR LUMCLASS_B[W] EQ 5) AND DLUMCLASS_B[W] EQ 0 AND SPTYPE_B[W] NE -1 AND DIAM_I[W] NE -1 AND EDIAM_I[W] NE -1 AND FINITE(DIAM_I[W]) AND SNR_DIAM_I[W] GT SNR AND DSPTYPE_B[W] GE 0 AND DSPTYPE_B[W] LE DSPTYPE_MAX)
;    IF (LUM_CLASSES EQ 123) THEN GOOD_B=WHERE((LUMCLASS_B[W] EQ -1 OR SPTYPE_B[W] LE 240D OR ((LUMCLASS_B[W] EQ 1 OR LUMCLASS_B[W] EQ 2 OR LUMCLASS_B[W] EQ 3) AND DLUMCLASS_B[W] EQ 0)) AND SPTYPE_B[W] NE -1 AND DIAM_I[W] NE -1 AND EDIAM_I[W] NE -1 AND FINITE(DIAM_I[W]) AND SNR_DIAM_I[W] GT SNR  AND DSPTYPE_B[W] EQ 0)
    IF (LUM_CLASSES EQ 123) THEN GOOD_B=WHERE((LUMCLASS_B[W] EQ -1 OR ((LUMCLASS_B[W] EQ 1 OR LUMCLASS_B[W] EQ 2 OR LUMCLASS_B[W] EQ 3) AND DLUMCLASS_B[W] EQ 0)) AND SPTYPE_B[W] NE -1 AND DIAM_I[W] NE -1 AND EDIAM_I[W] NE -1 AND FINITE(DIAM_I[W]) AND SNR_DIAM_I[W] GT SNR  AND DSPTYPE_B[W] EQ 0)
    IF (LUM_CLASSES EQ 1234) THEN GOOD_B=WHERE((LUMCLASS_B[W] EQ 1 OR LUMCLASS_B[W] EQ 2 OR LUMCLASS_B[W] EQ 3 OR LUMCLASS_B[W] EQ 4) AND DLUMCLASS_B[W] EQ 0 AND SPTYPE_B[W] NE -1 AND DIAM_I[W] NE -1 AND EDIAM_I[W] NE -1 AND FINITE(DIAM_I[W]) AND SNR_DIAM_I[W] GT SNR AND DSPTYPE_B[W] GE 0 AND DSPTYPE_B[W] LE DSPTYPE_MAX)
    GOOD_B=W[GOOD_B]
;
    IF (STAT EQ 1) THEN BEGIN
        ND=N_ELEMENTS(GOOD_B) & A=FIX(RANDOMN(SEED,/UNIFORM,FIX(ND/2*1.3))*ND) & GOOD_B=GOOD_B[A] & GOOD_B=GOOD_B[UNIQ(GOOD_B,SORT(GOOD_B))]
    ENDIF
  ENDELSE

  ND=LONG(N_ELEMENTS(GOOD_B))
  PRINT,"MAKE_JSDC_POLYNOMS: Using stars: ",ND

;
; Compute residuals from eq. : residual = lg(diam_i)+ci(i)*mag(j)-ci(j)*mag(i) = a + (M0-M1)*[b-ci(i)]
  FOR II=0, ND-1 DO BEGIN
     JJ=GOOD_B[II]
     RESIDU[JJ,*]=ALOG10(DIAM_I[JJ])-(0.2D*CJ*MAG_B[JJ,IBAND]-0.2D*CI*MAG_B[JJ,JBAND])
     E_RESIDU[JJ,*]=SQRT((EDIAM_I[JJ]/DIAM_I[JJ]/LN_10)^2+0.04D*CI^2*EMAG_B[JJ,JBAND]^2+0.04D*CJ^2*EMAG_B[JJ,IBAND]^2)
  ENDFOR
;
; Fit residuals with polynom band per band
;
  !P.MULTI=[0,3,2]
  PARAM1=DBLARR(NCOLORS,DEG+1) & E_PARAM1=PARAM1 & T=N_ELEMENTS(E_SPECTRAL_DSB[*,0]) & IND=DBLARR(T,DEG+1) & FOR KK=0, DEG DO IND[*,KK]=DINDGEN(T)^KK
  FOR N=0, NCOLORS-1 DO BEGIN
     S=SORT(SPTYPE_B[GOOD_B]) & A=GOOD_B[S] & MDAT=RESIDU[A,N]/E_RESIDU[A,N] & VEC=DBLARR(ND,DEG+1)
     FOR KK=0, DEG DO VEC[*,KK]=SPTYPE_B[A]^KK/E_RESIDU[A,N] & INV=INVERT(TRANSPOSE(VEC)#VEC,/DOUBLE,STATUS)
     PARAM1[N,*]=INV#TRANSPOSE(VEC)#MDAT & R=DINDGEN(DEG+1) & E_PARAM1[N,*]=SQRT(INV[R,R])
     FIT=DBLARR(ND) & FOR KK=0, DEG DO FIT=FIT+PARAM1[N,KK]*SPTYPE_B[A]^KK
     FOR KK=0, T-1 DO SPECTRAL_DSB[KK,N]=TOTAL(PARAM1[N,*]*IND[KK,*])
     FOR KK=0, T-1 DO E_SPECTRAL_DSB[KK,N]=SQRT(IND[KK,*]#INV#TRANSPOSE(IND[KK,*]))

    ; hide high mag error (filter out):
    F_RESIDU=RESIDU[*,N] & F_E_RESIDU=E_RESIDU[*,N] ; extract color info

    MF_COLS=WHERE(FF_COLS[*,N] NE 0)
    ; erase values on copy:
    F_RESIDU[MF_COLS]=0.0D
    F_E_RESIDU[MF_COLS]=0.0D

     PLOTERR,SPTYPE_B[A],F_RESIDU[A],F_E_RESIDU[A],CHARS=2,PSYM=8,NOHAT=1,YRANGE=[0,1.3],YSTYLE=1,XTITLE='SPECTRAL TYPE' & OPLOT,SPTYPE_B[A],FIT,COLOR=64000
     ; RES_B[A,N]=(RESIDU[A]-FIT)/E_RESIDU[A] & CHI2=MEAN(RES_B[A,N]^2)
     ; IF (DOPRINT) THEN PRINTF,UNITLOG,N,CHI2,N_ELEMENTS(A)
  ENDFOR
  !P.MULTI=0
rep='' & IF (dowait) THEN READ, 'press any key to continue', rep
;
; Histogram of residuals
  BIN=0.02 & HH=HISTOGRAM(RESIDU[GOOD_B,*],BINSIZE=BIN,LOCATIONS=XX) & XX=XX+BIN/2.
  RES=GAUSSFIT(XX,HH,NTERMS=3,Z) & PLOT,XX,HH,PSYM=10,Chars=2 & OPLOT,XX,RES,COLOR=65000 & IF (DOPRINT) THEN PRINTF,UNITLOG,"Polynoms: Z=",Z
rep='' & IF (dowait) THEN READ, 'press any key to continue', rep
;
; Fit residuals with polynoms all in one
  NS=0
  WHILE (NS NE ND) DO BEGIN

PRINT,"ITERATION ON STARS: ",N_ELEMENTS(GOOD_B)

     ND=N_ELEMENTS(GOOD_B) & NPAR=(DEG+1)*NCOLORS & DCOV_IB=DBLARR(NCOLORS,NCOLORS,ND) & VEC=DBLARR(NCOLORS*ND,NPAR) & MDAT=DBLARR(NCOLORS*ND)
     MDIF=MDAT & MAT1=0.2D*CJ#TRANSPOSE(0.2D*CJ) & MAT2=0.2D*CI#TRANSPOSE(0.2D*CI) & MAT3=0.2D*CI#TRANSPOSE(0.2D*CJ)
     ICOV=DBLARR(NCOLORS*ND,NCOLORS*ND) & ED=EDIAM_I[GOOD_B]/DIAM_I[GOOD_B]/LN_10
     FOR LL1=0, NCOLORS-1 DO BEGIN
        Q=EMAG_B[GOOD_B,IBAND[LL1]] & R=EMAG_B[GOOD_B,JBAND[LL1]]
        FOR LL2=0, NCOLORS-1 DO BEGIN
           IF (IBAND[LL1] EQ IBAND[LL2] AND JBAND[LL1] EQ JBAND[LL2]) THEN DCOV_IB[LL1,LL2,*]=MAT1[LL1,LL2]*Q^2+MAT2[LL1,LL1]*R^2+ED^2
           IF (IBAND[LL1] EQ IBAND[LL2] AND JBAND[LL1] NE JBAND[LL2]) THEN DCOV_IB[LL1,LL2,*]=MAT1[LL1,LL2]*Q^2+ED^2
           IF (IBAND[LL1] NE IBAND[LL2] AND JBAND[LL1] EQ JBAND[LL2]) THEN DCOV_IB[LL1,LL2,*]=MAT2[LL1,LL2]*R^2+ED^2
           IF (IBAND[LL1] NE IBAND[LL2] AND JBAND[LL1] NE JBAND[LL2]) THEN DCOV_IB[LL1,LL2,*]=ED^2
; following never happens if iband is never equal to jband, which is
; the case normally
;           IF (IBAND[LL1] EQ JBAND[LL2] AND JBAND[LL1] NE IBAND[LL2]) THEN DCOV_IB[LL1,LL2,*]=-MAT3[LL1,LL2]*Q^2+ED^2
;           IF (IBAND[LL1] NE JBAND[LL2] AND JBAND[LL1] EQ IBAND[LL2]) THEN DCOV_IB[LL1,LL2,*]=-MAT3[LL2,LL1]*R^2+ED^2
        ENDFOR
     ENDFOR

     FOR JJ=0, NCOLORS-1 DO BEGIN
        FOR KK=0, DEG DO VEC[DINDGEN(ND)*NCOLORS+JJ,JJ*(DEG+1)+KK]=SPTYPE_B[GOOD_B]^KK
     ENDFOR
     MDAT[*]=TRANSPOSE(RESIDU[GOOD_B,*])

     FOR II=0, ND-1 DO BEGIN
        KK=II*NCOLORS & ICOV[KK:KK+NCOLORS-1,KK:KK+NCOLORS-1]=INVERT(DCOV_IB[*,*,II],STATUS,/DOUBLE)
        IF (STATUS NE 0) THEN PRINT,"Error " + STRTRIM(status,2) + " at line " + STRTRIM(((SCOPE_TRACEBACK(/STRUCT))[-1]).LINE,2) + " in procedure " + ((SCOPE_TRACEBACK(/STRUCT))[-1]).routine
     ENDFOR

     MCOV_POL=INVERT(TRANSPOSE(VEC)#ICOV#VEC,STATUS,/DOUBLE) ; covariance matrix of polynom coefficients
     PAR=MCOV_POL#TRANSPOSE(VEC)#ICOV#MDAT & A=DINDGEN(NCOLORS*(DEG+1)) & E_PAR=SQRT(MCOV_POL[A,A]) ; polynom coefficients & errors
     FOR N=0, NCOLORS-1 DO PARAMS[N,*]=PAR[N*(DEG+1)+DINDGEN(DEG+1)] & FOR N=0, NCOLORS-1 DO E_PARAMS[N,*]=E_PAR[N*(DEG+1)+DINDGEN(DEG+1)]

     FOR II=0, ND-1 DO BEGIN
        FOR JJ=0, NCOLORS-1 DO BEGIN
           MDIF[II*NCOLORS+JJ]=MDAT[NCOLORS*II+JJ]-TOTAL(PARAMS[JJ,*]*SPTYPE_B[GOOD_B[II]]^DINDGEN(DEG+1))
           RES_B[GOOD_B[II],JJ]=MDIF[II*NCOLORS+JJ]/E_RESIDU[GOOD_B[II],JJ]
        ENDFOR
     ENDFOR

     CHI2_POL=TRANSPOSE(MDIF)#ICOV#MDIF/(ND*NCOLORS-NPAR) & S=DBLARR(ND,NCOLORS)-100 ; polynom coefficients chi2

    ; show intermediate results:
      PRINT,"CHI2_POL = " + STRTRIM(CHI2_POL,2)

     IF (USE_NEW_CONVERGENCE EQ 1) THEN BEGIN
         ; LBO: reject stars having highest residuals first in iterations (last):
         FOR N=0, NCOLORS-1 DO BEGIN
            ABS_RES=ABS(RES_B[GOOD_B,N])
            SORTED_RES=SORT(ABS_RES)
            LAST_TH=ABS_RES[SORTED_RES[N_ELEMENTS(SORTED_RES)-NLAST-1]]
            ; PRINT,"LAST_TH RESIDUAL(",N,"):",LAST_TH
            IF (LAST_TH LT NSIG) THEN LAST_TH=NSIG
            A=WHERE(ABS_RES LT LAST_TH, NP) & IF (NP NE 0) THEN S[A,N]=1
            PRINT,"Discarding residuals(",SCOLORS[N],") > ",LAST_TH," GOOD: ",NP
         ENDFOR
     END ELSE BEGIN
        ; BRUTE-FORCE (ALAIN 2017)
         FOR N=0, NCOLORS-1 DO BEGIN
            ABS_RES=ABS(RES_B[GOOD_B,N])
            LAST_TH=NSIG
            A=WHERE(ABS_RES LE LAST_TH, NP) & IF (NP NE 0) THEN S[A,N]=1
            PRINT,"Discarding residuals(",SCOLORS[N],") > ",LAST_TH," GOOD: ",NP
         ENDFOR
     END

     D=WHERE(TOTAL(S,2) EQ NCOLORS) & GOOD_B=GOOD_B[D] & NS=N_ELEMENTS(GOOD_B)
  ENDWHILE

;
; Compute modeled diameters & errors for all bands
;
  FOR II=0, NCOLORS-1 DO BEGIN
     FOR JJ=0, ND-1 DO BEGIN
        KK=GOOD_B[JJ] & A=MAG_B[KK,IBAND[II]] & B=MAG_B[KK,JBAND[II]] & C=EMAG_B[KK,IBAND[II]] & D=EMAG_B[KK,JBAND[II]]
        DIAM_B[KK,II]=0.2D*CJ[II]*A-0.2D*CI[II]*B+TOTAL(PARAMS[II,*]*SPTYPE_B[KK]^DINDGEN(DEG+1))
        MT=MCOV_POL[II*(DEG+1):(II+1)*(DEG+1)-1,II*(DEG+1):(II+1)*(DEG+1)-1]
        EDIAM_B[KK,II]=SQRT(0.04D*CJ[II]^2*C^2+0.04D*CI[II]^2*D^2+TRANSPOSE(SPTYPE_B[KK]^DINDGEN(DEG+1))#MT#(SPTYPE_B[KK]^DINDGEN(DEG+1)))
        RES_C[KK,II]=(ALOG10(DIAM_I[KK])-DIAM_B[KK,II])/SQRT((ED[JJ]^2+EDIAM_B[KK,II]^2))
     ENDFOR
  ENDFOR

;
; Compute mean modeled diameters & errors
;
  DCOV_OB=DCOV_IB & FOR II=0, ND-1 DO DCOV_OB(*,*,II)=DCOV_IB(*,*,II)-ED(II)^2 & AAA=DOUBLE(SPTYPE_B) & ERR=DBLARR(NCOLORS,ND)
  FOR II=0, ND-1 DO BEGIN
     FOR JJ=0, NCOLORS-1 DO BEGIN
        FOR KK=0, NCOLORS-1 DO BEGIN
           FOR Z=0, DEG DO BEGIN
              FOR W=0, DEG DO BEGIN
                 DCOV_OB[KK,JJ,II]=DCOV_OB[KK,JJ,II]+AAA[GOOD_B[II]]^Z*AAA[GOOD_B[II]]^W*MCOV_POL[(DEG+1)*JJ+Z,(DEG+1)*KK+W]
                 IF (KK EQ JJ) THEN ERR[JJ,II]=ERR[JJ,II]+AAA[GOOD_B[II]]^Z*AAA[GOOD_B[II]]^W*MCOV_POL[(DEG+1)*JJ+Z,(DEG+1)*KK+W]
              ENDFOR
           ENDFOR
        ENDFOR
     ENDFOR
     C=DCOV_OB[*,*,II] & B=INVERT(C,/DOUBLE,STATUS) & A=TOTAL(B)
     IF (STATUS NE 0) THEN PRINT,"Error " + STRTRIM(status,2) + " at line " + STRTRIM(((SCOPE_TRACEBACK(/STRUCT))[-1]).LINE,2) + " in procedure " + ((SCOPE_TRACEBACK(/STRUCT))[-1]).routine
     DMEAN_B[GOOD_B[II]]=TOTAL(B#TOTAL(DIAM_B[GOOD_B[II],*],1))/A & EDMEAN_B[GOOD_B[II]]=1.0D/SQRT(A)
     DIF=ALOG10(DIAM_I[GOOD_B[II]])-DIAM_B[GOOD_B[II],*] & CHI2_MD[GOOD_B[II]]=DIF#B#TRANSPOSE(DIF)/NCOLORS

    ; estimate chi2_scl based on individual polynoms vs mean (to get its 'scaling' factor vs real 'chi2' => median or mean ratio ?) :
     DIF=DMEAN_B[GOOD_B[II]]-DIAM_B[GOOD_B[II],*] & CHI2_SCL[GOOD_B[II]]=DIF#B#TRANSPOSE(DIF)/(NCOLORS-1)
  ENDFOR
;

;
; Plot residuals & fits
;
  !P.MULTI=[0,3,2]
  FOR N=0, NCOLORS-1 DO BEGIN
     D=SORT(SPTYPE_B[GOOD_B]) & A=GOOD_B[D] & FIT=DBLARR(ND) & FOR KK=0, DEG DO FIT=FIT+PARAMS[N,KK]*SPTYPE_B[A]^KK
     PLOTERR,SPTYPE_B[A],RESIDU[A,N],E_RESIDU[A,N],CHARS=2,NOHAT=1,PSYM=8,YRANGE=[0.,1.3],YSTYLE=1 & OPLOT,SPTYPE_B[A],FIT,COLOR=64000,THICK=2
     INV=MCOV_POL[(DEG+1)*N:(DEG+1)*(N+1)-1,(DEG+1)*N:(DEG+1)*(N+1)-1]
     FOR KK=0, T-1 DO SPECTRAL_DSB[KK,N]=TOTAL(PARAMS[N,*]*IND[KK,*])
     FOR KK=0, T-1 DO E_SPECTRAL_DSB[KK,N]=SQRT(IND[KK,*]#INV#TRANSPOSE(IND[KK,*]))
  ENDFOR
  !P.MULTI=0
rep='' & IF (dowait) THEN READ, 'press any key to continue', rep
;
; Plot results
  ZZ=DINDGEN(100)/10-5
; Plot histograms
  !P.MULTI=[0,3,2]
  FOR N=0, NCOLORS-1 DO BEGIN
     BIN=0.4 & HH=HISTOGRAM(RES_B[GOOD_B,N],BINSIZE=BIN,LOCATIONS=XX) & XX=XX+BIN/2. & RES=GAUSSFIT(XX,HH,NTERMS=3,Z)
     PLOT,XX,HH,PSYM=10,XRANGE=[-5,5],XSTYLE=1,CHARS=2 & OPLOT,XX,RES,COLOR=65000 & IF (DOPRINT) THEN PRINTF,UNITLOG,"Polynoms: Z=",Z
  ENDFOR
  HH=HISTOGRAM(RES_B[GOOD_B,*],BINSIZE=BIN,LOCATIONS=XX) & XX=XX+BIN/2. & RES=GAUSSFIT(XX,HH,NTERMS=3,Z)
  PLOT,XX,HH,PSYM=10,XRANGE=[-5,5],XSTYLE=1,CHARS=2 & OPLOT,XX,RES,COLOR=1000 & IF (DOPRINT) THEN PRINTF,UNITLOG,"Polynoms: Z=",Z
  PAR=PARAMS & EPAR=E_PARAMS
  !P.MULTI=0

rep='' & IF (dowait) THEN READ, 'press any key to continue', rep

  A=CHI2_MD[GOOD_B]
  L=WHERE(FINITE(A), NL)
  IF (DOPRINT) THEN PRINTF,UNITLOG,"SAMPLES: " + STRTRIM(N_ELEMENTS(GOOD_B),2)+" N CHI2: " + STRTRIM(NL,2)
  IF (DOPRINT) THEN PRINTF,UNITLOG,"CHI2_POL = " + STRTRIM(CHI2_POL,2) + ", CHI2_MD = " + STRTRIM(MEAN(A),2) + ", Good stars: " + STRTRIM(N_ELEMENTS(GOOD_B),2)

; show intermediate results:
  PRINT,"CHI2_POL = " + STRTRIM(CHI2_POL,2)
  HAS_A=WHERE(A GT 0.0 AND FINITE(A), NN)
  PRINT,"CHI2_MD: MEAN: ",MEAN(A[HAS_A]),NN," MIN: ",MIN(A[HAS_A])," MEDIAN: ",MEDIAN(A[HAS_A])," MAX: ",MAX(A[HAS_A])
 
  ; Compute the image histogram, using the default bin size of 1.
  HH=HISTOGRAM(ALOG10(A), NBINS=20,LOCATIONS=XBIN)

  PLOT,XBIN,HH,PSYM=10,XTITLE='log10(CHI2_MD)',YTITLE='Frequency'

rep='' & IF (dowait) THEN READ, 'press any key to continue', rep

; TEST CHI2 à la SearchCal:
  A=CHI2_SCL[GOOD_B]
  HAS_A=WHERE(A GT 0.0 AND FINITE(A), NN)
  PRINT,"CHI2_SCL: MEAN: ",MEAN(A[HAS_A]),NN," MIN: ",MIN(A[HAS_A])," MEDIAN: ",MEDIAN(A[HAS_A])," MAX: ",MAX(A[HAS_A])
 
  ; Compute the image histogram, using the default bin size of 1.
  HH=HISTOGRAM(ALOG10(A), NBINS=20,LOCATIONS=XBIN)

  PLOT,XBIN,HH,PSYM=10,XTITLE='log10(CHI2_SCL)',YTITLE='Frequency'

rep='' & IF (dowait) THEN READ, 'press any key to continue', rep


; Plot results
  !P.MULTI=[0,3,2]
  FOR N=0, NCOLORS-1 DO BEGIN
     PLOTERR,ALOG10(DIAM_I[GOOD_B]),DIAM_B[GOOD_B,N],ED,EDIAM_B[GOOD_B,N],CHARS=2,NOHAT=1,PSYM=8 & OPLOT,ZZ,ZZ,COLOR=64000
  ENDFOR
  PLOTERR,ALOG10(DIAM_I[GOOD_B]),DMEAN_B[GOOD_B],ED,EDMEAN_B[GOOD_B],CHARS=2,NOHAT=1,PSYM=8
  OPLOT,ALOG10(DIAM_I[GOOD_B]),DMEAN_B[GOOD_B],PSYM=8,COLOR=65000 & OPLOT,ZZ,ZZ,COLOR=64000
  !P.MULTI=0
rep='' & IF (dowait) THEN READ, 'press any key to continue', rep
;

  PASS_ALL_TESTS=(DATA_B)[GOOD_B]

IF (0 AND MODE EQ 'FIX') THEN BEGIN
  ; LBO: dump
  ; idx, sp, 6 mags, 6 mag errors, 3 diams, 3 diam errors, 1 diam mean, 1 diam mean error
  NS=N_ELEMENTS(GOOD_B)
  IF (DOPRINT) THEN PRINTF,UNITLOG,"#REF STAR DATA:",NS
  FOR N=0, NS-1 DO BEGIN
    IF (DOPRINT) THEN PRINTF,UNITLOG,format='(%"{%d, /* SP \"%s\" idx */ %d, /*MAG*/ %16.9e, %16.9e, %16.9e, %16.9e, %16.9e, %16.9e, /*EMAG*/ %16.9e, %16.9e, %16.9e, %16.9e, %16.9e, %16.9e, /*DIAM*/ %16.9e, %16.9e, %16.9e, /*EDIAM*/ %16.9e, %16.9e, %16.9e, /*DMEAN*/ %16.9e, /*EDMEAN*/ %16.9e },")',N, ORIG_SPTYPE[GOOD_B[N]], SPTYPE_B[GOOD_B[N]], MAG_B[GOOD_B[N],0:5], EMAG_B[GOOD_B[N],0:5], DIAM_B[GOOD_B[N],*], EDIAM_B[GOOD_B[N],*], DMEAN_B[GOOD_B[N]], EDMEAN_B[GOOD_B[N]]
  ENDFOR
ENDIF

  ; Plot new polynoms vs old:
  IF (MODE EQ 'FIX') THEN BEGIN
    X1=32 & X2=272
    ; USE SMALLER RANGE TO AVOID BOUNDARIES:
    X1+=10 & X2-=10

    PRINT,"Compare color-index range: [",X1," - ",X2,"]"

    SP_X=DINDGEN(X2-X1, START=X1) ; correct range of previous fit
    NX=N_ELEMENTS(SP_X)
    ZERO=DBLARR(NX)

; # IDL Fit results (Thu Mar 30 11:33:00 2017) with NSIG=5 DEG=4
; #
; #FIT COLORS:  V-J V-H V-K
; #domain:       42.000000       272.00000
; # Polynom coefficients (4th degree) from idl fit on 573 stars.
; # CHI2_POLYNOM:       0.47151226
; # CHI2_DMEAN  :       0.59718984
; #Color a0 a1 a2 a3 a4 etc...
; V-J      -0.542278815730343      0.0286962180492886   -0.000277651349901023    1.19220848289134E-06   -1.84035859482209E-09
; V-H      -0.278112351105841      0.0199098222519441   -0.000173593467797277    6.65081397586506E-07   -9.12217768686636E-10
; V-K      -0.165912647092855      0.0160043072517905   -0.000131734338283244    4.86645648078421E-07   -6.43695785941918E-10

    !P.MULTI=[0,2,4]

    ; (V-J), (V-H), (V-K)

    USE_JSDC2=1; ; 0=compare with python fit on JSDC2

    IF (USE_JSDC2 EQ 1) THEN BEGIN
        PRINT,"COMPARE WITH previous POLYNOMS"

        CFG_FILE="../alxAngDiamPolynomial-2017.cfg"
        
        ;CFG_FILE="../alxAngDiamPolynomial-CF1.cfg"
        ;CFG_FILE="../alxAngDiamPolynomial-CF2.cfg"

        template = {version:1.0, fieldnames : STRSPLIT('Color,a0,a1,a2,a3,a4',',', /extr), $
              fieldtypes : [7, 5, 5, 5, 5, 5], fieldgroups : [0, 1, 1, 1, 1, 1], $
              fieldcount: 6, fieldlocations:[0, 10, 34, 55, 80, 103], $
              datastart:0, delimiter:' ', commentsymbol:'#'}

        PRINT,"Loading file: ", CFG_FILE

        CSV_DATA = READ_ASCII(CFG_FILE, template=template, /VERBOSE)
        ; HELP, CSV_DATA, /STRUCTURES

        OLD_COLORS=TRANSPOSE(CSV_DATA.COLOR)
        OLD_PARAMS=TRANSPOSE(CSV_DATA.A0)

        ; PRINT,"OLD_COLORS: ",OLD_COLORS

        FOR N=0, 2 DO BEGIN
            IF (OLD_COLORS[N] NE SCOLORS[N]) THEN BEGIN
                PRINT,"Incorrect color: ",SCOLORS[N]," <=> ",OLD_COLORS[N]
                !P.MULTI=0
                RETURN
            ENDIF
        ENDFOR

    END ELSE BEGIN
        ; compare with python fit on JSDC2 (good 200k stars)
        PRINT,"COMPARE WITH PYTHON POLYNOM FIT ON JSDC2 (resampling)"
        OLD_PARAMS=TRANSPOSE([ $
            [-0.30770691515498305D, 0.021708214250019328D, -0.0002088463350539533D, 9.110000306703637D-07, -1.4385474593507733D-09], $
            [-0.23216936245756947D, 0.01908197234777601D, -0.00017121715018842727D, 6.788856960316083D-07, -9.729160736281222D-10], $
            [-0.18513496481979264D, 0.017248080435748388D, -0.00014812975423580973D, 5.670452751952389D-07, -7.823263114622169D-10] $
        ])
    ENDELSE

    MEAN_NEW=DBLARR(NX) & MEAN_OLD=DBLARR(NX)

    FOR N=0, 2 DO BEGIN
        PRINT,"COLOR: ",SCOLORS[N]
        PRINTF,-1,format="OLD_PARAMS: [%23.15e, %23.15e, %23.15e, %23.15e, %23.15e]",OLD_PARAMS[N,0],OLD_PARAMS[N,1],OLD_PARAMS[N,2],OLD_PARAMS[N,3],OLD_PARAMS[N,4]
        PRINTF,-1,format="PARAMS:     [%23.15e, %23.15e, %23.15e, %23.15e, %23.15e]",PARAMS[N,*]

        FIT_NEW=DBLARR(NX) & FIT_OLD=DBLARR(NX)
        FOR KK=0, 4   DO FIT_OLD=FIT_OLD + OLD_PARAMS[N,KK] * SP_X^KK
        FOR KK=0, DEG DO FIT_NEW=FIT_NEW +     PARAMS[N,KK] * SP_X^KK

        ; compute simple mean:
        MEAN_NEW += FIT_NEW & MEAN_OLD += FIT_OLD
        DIFF=FIT_NEW - FIT_OLD
        RES=100.0D*DIFF

        IF (SHOW_DIFF EQ 1) THEN BEGIN
            PLOT,SP_X,RES,XTITLE='SPECTRAL TYPE',YTITLE="POLYNOM DIFF (%) " + SCOLORS[N],XRANGE=[0,300],YRANGE=[-10,10],COLOR=64000
            OPLOT,SP_X,ZERO
        END ELSE BEGIN
            PLOT,SP_X,FIT_NEW,XTITLE='SPECTRAL TYPE',YTITLE="POLYNOM " + SCOLORS[N],XRANGE=[0,300],YRANGE=[0,1],COLOR=64000
            OPLOT,SP_X,FIT_OLD
        ENDELSE

        PRINT," difference between polynoms on ",SCOLORS[N]
        PRINT,"    DIFF POLYNOMS (%): MIN: ",MIN(RES)," MEAN: ",MEAN(RES)," MEDIAN: ",MEDIAN(RES)," MAX: ",MAX(RES)
     
        ; Compute the residual histogram, using the default bin size of 1.
        HH=HISTOGRAM(RES, NBINS=25,LOCATIONS=XBIN)

        PLOT,XBIN,HH,PSYM=10,XRANGE=[-5,5],XTITLE='DIFF(NEW - OLD) (%)',YTITLE='Frequency ' + SCOLORS[N]
    ENDFOR

    ; simple mean, not weighted:
    MEAN_NEW /= 3 & MEAN_OLD /= 3
    DIFF=MEAN_NEW - MEAN_OLD
    RES=100.0D*DIFF

    IF (SHOW_DIFF EQ 1) THEN BEGIN
        PLOT,SP_X,RES,XTITLE='SPECTRAL TYPE',YTITLE="DMEAN DIFF (%)",XRANGE=[0,300],YRANGE=[-10,10],COLOR=64000
        OPLOT,SP_X,ZERO
    END ELSE BEGIN
        PLOT,SP_X,MEAN_NEW,XTITLE='SPECTRAL TYPE',YTITLE="DMEAN",XRANGE=[0,300],YRANGE=[0,1],COLOR=64000
        OPLOT,SP_X,MEAN_OLD
    ENDELSE

    PRINT," difference between MEAN"
    PRINT,"    DIFF MEAN (%): MIN: ",MIN(RES)," MEAN: ",MEAN(RES)," MEDIAN: ",MEDIAN(RES)," MAX: ",MAX(RES)
 
    ; Compute the residual histogram, using the default bin size of 1.
    HH=HISTOGRAM(RES, NBINS=25,LOCATIONS=XBIN)

    PLOT,XBIN,HH,PSYM=10,XRANGE=[-5,5],XTITLE='DIFF(MEAN NEW - MEAN OLD) (%)',YTITLE='Frequency '

rep='' & IF (dowait) THEN READ, 'press any key to continue', rep

    !P.MULTI=0
  ENDIF

  RETURN
END
